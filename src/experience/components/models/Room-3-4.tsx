"use client";

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 Room-3-4.glb
Converted & optimized for baked texture + animated clock & coffee smoke
*/

import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import React, { useMemo, useRef } from "react";
import { Mesh, TextureLoader } from "three";

type GLTFResult = {
  nodes: Record<
    string,
    Mesh & {
      position?: [number, number, number];
      rotation?: [number, number, number];
      scale?: number | [number, number, number];
    }
  >;
};

const Room4: React.FC<React.ComponentProps<"group">> = (props) => {
  const { nodes } = useGLTF("/models/Room-3-4.glb") as unknown as GLTFResult;

  // 🧱 Baked texture setup
  const bakedTexture = useMemo(() => {
    const texture = new TextureLoader().load("/textures/Room3-4.jpg");
    texture.flipY = false;
    return texture;
  }, []);

  // 🕒 Clock hand refs
  const hoursRef = useRef<Mesh>(null);
  const minutesRef = useRef<Mesh>(null);
  const secondsRef = useRef<Mesh>(null);

  // ☕ Smoke ref
  const smokeRef = useRef<Mesh>(null);

  // 🕹 Animation loop (clock + smoke)
  useFrame(() => {
    const now = new Date();
    const hours = now.getHours() % 12;
    const minutes = now.getMinutes();
    const seconds = now.getSeconds() + now.getMilliseconds() / 1000;

    // 🕒 Clock hands
    if (hoursRef.current)
      hoursRef.current.rotation.x = -((hours + minutes / 60) * (Math.PI / 6));
    if (minutesRef.current)
      minutesRef.current.rotation.x = -(
        (minutes + seconds / 60) *
        (Math.PI / 30)
      );
    if (secondsRef.current)
      secondsRef.current.rotation.x = -(seconds * (Math.PI / 30));
  });

  // 🖼 Photos on wall
  const photos = [
    "photo-1",
    "photo-2",
    "photo-3",
    "photo-4",
    "photo-5",
    "photo-6",
    "photo-7",
    "photo-8",
  ];

  return (
    <group {...props} dispose={null}>
      {/* 🕰 Clock */}
      <mesh
        geometry={nodes.Clock.geometry}
        position={[-3.773, 3.98, -1.615]}
        rotation={[0, -0.77, 0]}
        scale={1.224}
      >
        <meshBasicMaterial map={bakedTexture} />

        <mesh ref={hoursRef} geometry={nodes.hours.geometry}>
          <meshBasicMaterial map={bakedTexture} />
        </mesh>
        <mesh ref={minutesRef} geometry={nodes.minutes.geometry}>
          <meshBasicMaterial map={bakedTexture} />
        </mesh>
        <mesh ref={secondsRef} geometry={nodes.secondes.geometry}>
          <meshBasicMaterial map={bakedTexture} />
        </mesh>
      </mesh>

      {/* 🪞 Table plane (baked) */}
      {nodes.Plane040 && (
        <mesh
          geometry={nodes.Plane040.geometry}
          position={[-0.451, 1.833, 2.99]}
        >
          <meshBasicMaterial map={bakedTexture} />
        </mesh>
      )}

      {/* 🐱 Schrödinger mug */}
      {nodes.schrodinger && (
        <mesh
          geometry={nodes.schrodinger.geometry}
          position={[-0.18, 1.898, 2.996]}
        >
          <meshBasicMaterial map={bakedTexture} />
        </mesh>
      )}

      {/* ☕ Coffee smoke (animated) */}
      {nodes["coffe-smoke"] && (
        <mesh
          name={"coffe-smoke"}
          ref={smokeRef}
          geometry={nodes["coffe-smoke"].geometry}
          position={[-0.191, 1.972, 3.002]}
        >
          <meshBasicMaterial map={bakedTexture} />
        </mesh>
      )}

      {/* 🖼 Photos */}
      {photos.map((name) => {
        const node = nodes[name];
        if (!node) return null;
        return (
          <mesh
            key={name}
            geometry={node.geometry}
            position={node.position}
            rotation={node.rotation}
          >
            <meshBasicMaterial map={bakedTexture} />
          </mesh>
        );
      })}
    </group>
  );
};

useGLTF.preload("/models/Room-3-4.glb");

export default Room4;
